var searchIndex = {};
searchIndex['typeinfo'] = {"items":[[0,"","typeinfo","The purpose of this crate is to provide an easy way to query the runtime type\ninformation (such as field names, offsets and types) for POD (*plain old data*) types,\nand to allow creating such types without the need for much boilerplate. This information\nis extremely useful when communicating with foreign low-level libraries, and, more\ngenerally, for any kind of serialization/deserialization work.",null,null],[3,"Field","","Field of a compound type: contains type, name and offset from the beginning of the struct.",null,null],[12,"ty","","field value type",0,null],[12,"name","","field name",0,null],[12,"offset","","offset to the beginning of the struct",0,null],[4,"Type","","Represents a POD type: scalar, fixed-size array or compound (struct).\nMay be arbitrarily nested.",null,null],[13,"Int8","","1-byte signed integer",1,null],[13,"Int16","","2-byte signed integer",1,null],[13,"Int32","","4-byte signed integer",1,null],[13,"Int64","","8-byte signed integer",1,null],[13,"UInt8","","1-byte unsigned integer",1,null],[13,"UInt16","","2-byte unsigned integer",1,null],[13,"UInt32","","3-byte unsigned integer",1,null],[13,"UInt64","","4-byte unsigned integer",1,null],[13,"Float32","","4-byte floating-point number",1,null],[13,"Float64","","8-byte floating-point number",1,null],[13,"Char","","4-byte unicode character type",1,null],[13,"Bool","","1-byte boolean type",1,null],[13,"Array","","fixed-size array with POD elements",1,null],[13,"Compound","","compound type whose fields are POD",1,null],[8,"TypeInfo","","Trait implemented by copyable POD data types with fixed size, enables\nruntime reflection.",null,null],[10,"type_info","","Returns the runtime type information for the implementing type.",2,{"inputs":[{"name":"typeinfo"}],"output":{"name":"type"}}],[11,"fmt","","",1,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"size","","Returns the total size of a type value in bytes.",1,{"inputs":[{"name":"type"}],"output":{"name":"usize"}}],[11,"is_scalar","","Returns true if the underlying type is a scalar.",1,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"is_array","","Returns true if the underlying type is a fixed-size array.",1,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"is_compound","","Returns true if the underlying type is compound.",1,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"new","","",0,{"inputs":[{"name":"field"},{"name":"type"},{"name":"s"},{"name":"usize"}],"output":{"name":"field"}}],[14,"def!","","Compound type constructor that implements [`TypeInfo`](trait.TypeInfo.html)\ntrait automatically.",null,null]],"paths":[[3,"Field"],[4,"Type"],[8,"TypeInfo"]]};
initSearch(searchIndex);
